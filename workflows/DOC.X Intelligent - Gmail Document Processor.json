{
  "name": "DOC.X Intelligent - Gmail Document Processor",
  "nodes": [
    {
      "parameters": {},
      "id": "42ecab6f-b50b-401c-bff2-2bcab2418c86",
      "name": "⏭️ No Download - Process Content",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -384,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log processing errors\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  console.log(`❌ ERROR: Document processing failed`);\n  console.log(`📄 Document: ${data.documentId || 'Unknown'}`);\n  console.log(`🔍 Source: ${data.source || 'Unknown'}`);\n  console.log(`⚠️ Error: ${data.message || 'Unknown error'}`);\n  \n  results.push({\n    json: {\n      status: 'error_logged',\n      documentId: data.documentId,\n      source: data.source,\n      error: data.message,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "fce88125-5306-4220-ac6a-0a7ff7fea771",
      "name": "❌ Log Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log successful processing\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  const document = data.document || {};\n  \n  console.log(`✅ SUCCESS: Document ${document.id} processed`);\n  console.log(`🎯 Department: ${document.assigned_department}`);\n  console.log(`🌐 Language: ${document.language}`);\n  console.log(`📊 Confidence: ${document.confidence}%`);\n  console.log(`🔥 Priority: ${document.priority}`);\n  \n  results.push({\n    json: {\n      status: 'logged',\n      documentId: document.id,\n      department: document.assigned_department,\n      language: document.language,\n      confidence: document.confidence,\n      priority: document.priority,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "c17c654f-9378-432e-ab12-06e21dce76b5",
      "name": "📝 Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        -128
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "0f74d40d-8da9-4cbc-9b99-d78d5af7ff3d",
      "name": "✅ Processing Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        240,
        -64
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:5000/webhook/store-document",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "0e614613-e80a-4bc4-8366-5c32f7ddb9d7",
      "name": "� Store Document (Stage 1)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        48,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare document for backend processing with embedded binary data\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const json = item.json;\n  const binary = item.binary || {};\n  \n  console.log(`\\n🔄 Preparing document for backend:`);\n  console.log(`📄 Document ID: ${json.documentId}`);\n  console.log(`📎 Filename: ${json.filename}`);\n  console.log(`🔗 Has binary: ${Object.keys(binary).length > 0}`);\n  console.log(`📝 Has text content: ${!!json.content}`);\n  console.log(`🌐 Download URL: ${!!json.downloadUrl}`);\n  \n  // Prepare document data for DOC.X backend\n  const documentData = {\n    documentId: json.documentId,\n    filename: json.filename,\n    source: json.source,\n    mimeType: json.mimeType,\n    metadata: json.metadata || {},\n    downloadUrl: json.downloadUrl || null,\n    parentMessage: json.parentMessage || null,\n    parentLibrary: json.parentLibrary || null,\n    parentSystem: json.parentSystem || null,\n    parentChat: json.parentChat || null,\n    timestamp: new Date().toISOString(),\n    binaryData: null,  // Will be populated if binary data exists\n    binary: {}  // Include binary metadata for backend\n  };\n  \n  // Handle binary data by embedding it as base64 in JSON\n  if (Object.keys(binary).length > 0) {\n    console.log(`📎 Processing binary attachments for JSON embedding`);\n    \n    const firstBinaryKey = Object.keys(binary)[0];\n    const binaryInfo = binary[firstBinaryKey];\n    \n    if (binaryInfo && binaryInfo.data) {\n      // Embed binary data as base64 in the JSON\n      documentData.binaryData = binaryInfo.data;\n      documentData.fileSize = binaryInfo.fileSize || (binaryInfo.data ? Buffer.byteLength(binaryInfo.data, 'base64') : 0);\n      documentData.mimeType = binaryInfo.mimeType || documentData.mimeType;\n      documentData.hasBinary = true;\n      documentData.binaryKey = firstBinaryKey;\n      \n      // Store binary metadata\n      documentData.binary[firstBinaryKey] = {\n        mimeType: binaryInfo.mimeType,\n        fileName: binaryInfo.fileName || json.filename,\n        fileSize: documentData.fileSize\n      };\n      \n      console.log(`✅ Binary data embedded: ${json.filename} (${documentData.fileSize} bytes)`);\n    }\n  }\n  \n  // Handle content extraction based on available data\n  if (json.content && json.content.trim()) {\n    // Direct text content available (email content, extracted text)\n    documentData.content = json.content;\n    documentData.contentSource = 'direct';\n    console.log(`✅ Using direct text content (${json.content.length} chars)`);\n  } else if (documentData.hasBinary) {\n    // Binary attachment available - will be extracted by backend\n    documentData.content = null; // Will be extracted by backend\n    documentData.contentSource = 'binary';\n    console.log(`� Using binary attachment for processing`);\n  } else if (json.downloadUrl) {\n    // Download URL available - backend will fetch and process\n    documentData.content = null; // Will be downloaded and extracted by backend\n    documentData.contentSource = 'download';\n    console.log(`🌐 Using download URL for processing`);\n  } else {\n    // Fallback - use any available text\n    const fallbackContent = json.text || json.html || json.snippet || '';\n    documentData.content = fallbackContent;\n    documentData.contentSource = 'fallback';\n    console.log(`⚠️ Using fallback content (${fallbackContent.length} chars)`);\n  }\n  \n  // Important: Only return JSON data since we embedded binary as base64\n  results.push({\n    json: documentData\n    // Note: No separate binary object since it's embedded in JSON\n  });\n  \n  console.log(`✅ Document prepared with content source: ${documentData.contentSource}`);\n  if (documentData.hasBinary) {\n    console.log(`📦 Binary data embedded in JSON payload`);\n  }\n}\n\nconsole.log(`\\n🎯 Backend Preparation Summary:`);\nconsole.log(`📄 Total documents prepared: ${results.length}`);\nconsole.log(`📎 Documents with embedded binary: ${results.filter(r => r.json.hasBinary).length}`);\nconsole.log(`📝 Documents with direct content: ${results.filter(r => r.json.contentSource === 'direct').length}`);\n\nreturn results;"
      },
      "id": "faa58b79-62e7-48f5-86a8-c8b1f772a552",
      "name": "🔄 Prepare for Backend",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        80
      ]
    },
    {
      "parameters": {
        "url": "={{ (typeof $json.downloadUrl === 'string' && $json.downloadUrl.trim() !== '' && $json.downloadUrl !== 'null' && $json.downloadUrl !== 'undefined' && $json.downloadUrl.includes('http')) ? $json.downloadUrl : 'https://httpbin.org/status/204' }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 10000
        }
      },
      "id": "d42a1eeb-223f-4d2b-aaed-219f18f2c9b0",
      "name": "📥 Download Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        -128
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.needsDownload }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              },
              "id": "d49359a6-4f57-4d6b-a2fd-7dfc7b1cd2f5"
            },
            {
              "leftValue": "={{ $json.downloadUrl }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              },
              "id": "44675df5-ee35-4fda-897f-5d6d40de7468"
            },
            {
              "leftValue": "={{ $json.downloadUrl }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "id": "b37d721c-bb64-450a-b5cd-5a4a1c8e3b6f"
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "186d716f-0f77-4c97-9498-a8e1824bd46c",
      "name": "📥 Needs Download?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -416,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare documents for download or direct processing\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const json = item.json;\n  const binary = item.binary || {};\n  \n  console.log(`🔄 Preparing document: ${json.filename}`);\n  console.log(`📥 Download URL: ${json.downloadUrl}`);\n  console.log(`📎 Has attachment: ${json.metadata?.hasAttachment}`);\n  console.log(`💾 Has binary data: ${json.metadata?.hasBinaryData}`);\n  console.log(`🔗 Binary keys: ${Object.keys(binary)}`);\n  \n  // Check if we already have binary data (from email attachments)\n  if (json.metadata?.hasBinaryData && Object.keys(binary).length > 0) {\n    console.log(`📁 Document already has binary data - ready for backend`);\n    // Binary attachment is already processed, just pass it through\n    results.push({\n      json: {\n        ...json,\n        processingType: 'binary',\n        needsDownload: false\n      },\n      binary: binary\n    });\n  }\n  // Check if we have a valid download URL\n  else if (json.downloadUrl && json.downloadUrl !== 'null' && json.downloadUrl !== '' && json.downloadUrl !== 'undefined') {\n    console.log(`📁 Document has download URL - will download file`);\n    // Mark for actual download\n    results.push({\n      json: {\n        ...json,\n        processingType: 'download',\n        needsDownload: true\n      }\n    });\n  } else {\n    console.log(`📧 Document is content-only - creating virtual file`);\n    \n    // Create virtual binary data for email content\n    const emailContent = json.content || '';\n    const contentBuffer = Buffer.from(emailContent, 'utf8');\n    \n    const virtualBinary = {\n      data: {\n        data: contentBuffer.toString('base64'),\n        mimeType: json.mimeType || 'text/html',\n        fileName: json.filename,\n        fileSize: contentBuffer.length\n      }\n    };\n    \n    console.log(`📄 Created virtual file: ${json.filename} (${contentBuffer.length} bytes)`);\n    \n    // Mark as already processed with virtual binary\n    results.push({\n      json: {\n        ...json,\n        processingType: 'content',\n        needsDownload: false\n      },\n      binary: virtualBinary\n    });\n  }\n}\n\nconsole.log(`🎯 Prepared ${results.length} documents`);\nreturn results;"
      },
      "id": "0401b85e-78f4-4e58-968f-eca61f72d622",
      "name": "🔄 Prepare Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        144
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.downloadUrl }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              },
              "id": "8360532c-c7fc-4f15-83fe-34c485431dbc"
            },
            {
              "leftValue": "={{ $json.downloadUrl }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "id": "afd366eb-fc38-45af-ab06-16a5f74de99d"
            },
            {
              "leftValue": "={{ $json.downloadUrl }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "id": "9b86a72e-a80c-4c2d-9e26-4c27469a236a"
            },
            {
              "leftValue": "={{ $json.metadata?.hasAttachment }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              },
              "id": "c1e1cbfb-f954-4364-a850-dd42316af94f"
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "24522271-77a6-4be1-8439-d0ac11c8b32e",
      "name": "📥 Has Download URL or Attachment?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -608,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process WhatsApp documents\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  if (data.messages && Array.isArray(data.messages)) {\n    for (const message of data.messages) {\n      if (message.document) {\n        results.push({\n          json: {\n            documentId: `whatsapp_${message.id}`,\n            filename: message.document.filename || `whatsapp_doc_${message.id}.pdf`,\n            downloadUrl: message.document.downloadUrl,\n            mimeType: message.document.mimetype || 'application/pdf',\n            source: 'whatsapp',\n            metadata: {\n              chatId: message.chatId,\n              from: message.from,\n              timestamp: message.timestamp,\n              caption: message.caption,\n              language: 'unknown',\n              priority: message.caption?.includes('urgent') || message.caption?.includes('അടിയന്തര') ? 'urgent' : 'normal'\n            },\n            parentChat: {\n              id: message.chatId,\n              participant: message.from\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nreturn results;"
      },
      "id": "a4c5966c-d824-47c8-a06b-bfe0ae4731b2",
      "name": "📱 WhatsApp Document Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process Maximo exports\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  if (data.member && Array.isArray(data.member)) {\n    for (const asset of data.member) {\n      results.push({\n        json: {\n          documentId: `maximo_${asset.assetnum}_${Date.now()}`,\n          filename: `maximo_export_${asset.assetnum}.json`,\n          content: JSON.stringify(asset, null, 2),\n          mimeType: 'application/json',\n          downloadUrl: null,\n          source: 'maximo',\n          metadata: {\n            assetNumber: asset.assetnum,\n            location: asset.location,\n            status: asset.status,\n            changeDate: asset.changedate,\n            description: asset.description,\n            language: 'english',\n            priority: asset.status === 'BROKEN' ? 'urgent' : 'normal'\n          },\n          parentSystem: {\n            name: 'Maximo',\n            type: 'Asset Management'\n          }\n        }\n      });\n    }\n  }\n}\n\nreturn results;"
      },
      "id": "31d3f1f9-b717-4551-add1-f5dc94af3f20",
      "name": "🔧 Maximo Document Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process SharePoint documents\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  if (data.value && Array.isArray(data.value)) {\n    for (const doc of data.value) {\n      results.push({\n        json: {\n          documentId: `sharepoint_${doc.Id}`,\n          filename: doc.FileLeafRef || doc.Title,\n          downloadUrl: doc.FileRef ? `https://kmrlcoin.sharepoint.com${doc.FileRef}` : null,\n          mimeType: doc.File_x0020_Type || 'application/octet-stream',\n          source: 'sharepoint',\n          metadata: {\n            modified: doc.Modified,\n            author: doc.Author?.Title || 'Unknown',\n            size: doc.File_x0020_Size || 0,\n            language: 'unknown',\n            priority: 'normal'\n          },\n          parentLibrary: {\n            title: 'KMRL Documents',\n            url: doc.FileRef\n          }\n        }\n      });\n    }\n  }\n}\n\nreturn results;"
      },
      "id": "67ceb237-200a-4f52-bdd6-63d0d792f49d",
      "name": "📁 SharePoint Document Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "// ---------- Helper Functions ----------\nfunction safeString(value) {\n  if (value === undefined || value === null) return '';\n  try {\n    return String(value).trim();\n  } catch {\n    return '';\n  }\n}\n\nfunction extractFromField(from) {\n  // Gmail 'from' field can be a string, object, or nested array\n  if (!from) return 'Unknown Sender';\n  if (typeof from === 'string') return from;\n\n  if (from.text) return from.text;\n  if (from.value && Array.isArray(from.value) && from.value.length > 0) {\n    const val = from.value[0];\n    if (val.name && val.address) return `${val.name} <${val.address}>`;\n    if (val.address) return val.address;\n  }\n\n  // Fallback for weird Gmail node structures\n  if (from.address) return from.address;\n  if (from.name) return from.name;\n\n  return 'Unknown Sender';\n}\n\nfunction hasMultipartContent(headers) {\n  if (!headers) return false;\n  const contentType = headers['content-type'] || headers['Content-Type'];\n  return typeof contentType === 'string' && contentType.includes('multipart/');\n}\n\nfunction extractBoundary(headers) {\n  if (!headers) return null;\n  const contentType = headers['content-type'] || headers['Content-Type'];\n  const match =\n    typeof contentType === 'string'\n      ? contentType.match(/boundary=\"?([^\";]+)\"?/)\n      : null;\n  return match ? match[1] : null;\n}\n\n// ---------- Main ----------\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  if (!item.json) continue;\n  const data = item.json;\n  const binary = item.binary || {};\n  let hasProcessedAttachments = false;\n\n  // ---------- Method 1: Binary Attachments ----------\n  if (binary && Object.keys(binary).length > 0) {\n    console.log(`📎 Found ${Object.keys(binary).length} binary attachments`);\n\n    for (const [key, attachment] of Object.entries(binary)) {\n      if (!attachment) continue;\n\n      const fileName =\n        attachment.fileName ||\n        attachment.filename ||\n        `attachment_${key}.${(attachment.mimeType || '').split('/')[1] || 'bin'}`;\n      const fileSize = attachment.fileSize || 0;\n\n      results.push({\n        json: {\n          documentId: `gmail_${data.id}_${fileName}`,\n          filename: fileName,\n          mimeType: attachment.mimeType || 'application/octet-stream',\n          size: fileSize,\n          source: 'gmail',\n          parentMessage: {\n            id: data.id,\n            subject: safeString(data.subject),\n            from: safeString(extractFromField(data.from)),\n            date: data.date,\n          },\n          metadata: {\n            hasAttachment: true,\n            hasBinaryData: true,\n            kmrlRelevance: 'confirmed',\n            priority: 'normal',\n          },\n        },\n        binary: { [key]: attachment },\n      });\n      hasProcessedAttachments = true;\n    }\n  }\n\n  // ---------- Method 2: Gmail Processed Attachments ----------\n  if (\n    !hasProcessedAttachments &&\n    data.attachments &&\n    Array.isArray(data.attachments) &&\n    data.attachments.length > 0\n  ) {\n    console.log(`📎 Found ${data.attachments.length} Gmail attachments`);\n    for (const attachment of data.attachments) {\n      const downloadUrl =\n        attachment.downloadUrl ||\n        attachment.url ||\n        (attachment.attachmentId\n          ? `https://www.googleapis.com/gmail/v1/users/me/messages/${data.id}/attachments/${attachment.attachmentId}`\n          : null);\n\n      results.push({\n        json: {\n          documentId: `gmail_${data.id}_${attachment.filename}`,\n          filename: attachment.filename || 'attachment',\n          mimeType: attachment.mimeType || 'application/octet-stream',\n          size: attachment.size || 0,\n          downloadUrl,\n          source: 'gmail',\n          parentMessage: {\n            id: data.id,\n            subject: safeString(data.subject),\n            from: safeString(extractFromField(data.from)),\n            date: data.date,\n          },\n          metadata: {\n            hasAttachment: true,\n            kmrlRelevance: 'confirmed',\n            priority: 'normal',\n          },\n        },\n      });\n      hasProcessedAttachments = true;\n    }\n  }\n\n  // ---------- Method 3: Multipart Emails ----------\n  if (!hasProcessedAttachments && hasMultipartContent(data.headers)) {\n    const boundary = extractBoundary(data.headers);\n    results.push({\n      json: {\n        documentId: `gmail_${data.id}_multipart`,\n        filename: `${safeString(data.subject) || 'KMRL Email'}.eml`,\n        content: data.html || data.text || '',\n        mimeType: 'message/rfc822',\n        source: 'gmail',\n        parentMessage: {\n          id: data.id,\n          subject: safeString(data.subject),\n          from: safeString(extractFromField(data.from)),\n          date: data.date,\n        },\n        metadata: {\n          hasAttachment: true,\n          multipartBoundary: boundary,\n          kmrlRelevance: 'confirmed',\n          priority: safeString(data.subject)\n            .toLowerCase()\n            .includes('urgent')\n            ? 'urgent'\n            : 'normal',\n        },\n      },\n    });\n    hasProcessedAttachments = true;\n  }\n\n  // ---------- Method 4: Plain Emails ----------\n  if (!hasProcessedAttachments) {\n    results.push({\n      json: {\n        documentId: `gmail_${data.id}_content`,\n        filename: `${safeString(data.subject) || 'KMRL Email'}.txt`,\n        content: data.text || data.html || '',\n        mimeType: data.html ? 'text/html' : 'text/plain',\n        source: 'gmail',\n        parentMessage: {\n          id: data.id,\n          subject: safeString(data.subject),\n          from: safeString(extractFromField(data.from)),\n          date: data.date,\n        },\n        metadata: {\n          hasAttachment: false,\n          kmrlRelevance: 'confirmed',\n          priority:\n            safeString(data.subject).toLowerCase().includes('urgent') ||\n            safeString(data.subject).toLowerCase().includes('അടിയന്തര')\n              ? 'urgent'\n              : 'normal',\n        },\n      },\n    });\n  }\n}\n\n// ---------- Summary ----------\nconsole.log(`\\n🎯 Gmail Processing Summary`);\nconsole.log(`📧 Total emails processed: ${items.length}`);\nconsole.log(`📄 Documents created: ${results.length}`);\nconsole.log(\n  `✅ KMRL-related items: ${\n    results.filter((r) => r.json.metadata.kmrlRelevance === 'confirmed').length\n  }`\n);\n\nreturn results;\n"
      },
      "id": "cdbb02c6-e147-4c71-816c-ac743ad5feb0",
      "name": "📧 Gmail Document Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        -224
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.source }}",
              "rightValue": "gmail",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "d9045467-6a18-437d-8476-15b3f91a9b2a",
      "name": "🎯 Source Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1056,
        -80
      ]
    },
    {
      "parameters": {
        "url": "{{ $parameter.whatsappApiUrl }}/api/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter",
              "value": "hasDocument=true&after={{ $now.minus({hours: 6}).toISO() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2035fa83-5fd9-4947-8cb1-7e938806c2e9",
      "name": "📱 WhatsApp Scanner",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1312,
        240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "{{ $parameter.maximoApiUrl }}/api/os/mxasset",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "oslc.where",
              "value": "changedate>=\"{{ $now.minus({days: 1}).toISO() }}\""
            },
            {
              "name": "oslc.select",
              "value": "assetnum,description,location,status,changedate"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "365fc75d-3609-46ef-8ff0-c3ae61496209",
      "name": "🔧 Maximo Scanner",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1312,
        80
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://kmrlcoin.sharepoint.com/_api/web/lists/getbytitle('KMRL Documents')/items?$filter=Modified ge datetime'{{ $now.minus({days: 1}).toISO() }}'",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOutlookOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "651f9123-2640-4707-b50f-77839bf2dd1d",
      "name": "📁 SharePoint Scanner",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1312,
        -80
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 10,
        "simple": false,
        "filters": {
          "readStatus": "unread"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "id": "a44ee034-089b-483c-931f-6a09efd3eed4",
      "name": "📧 Gmail Scanner",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        -1312,
        -224
      ],
      "webhookId": "6b47c697-ad5f-4d1d-9d33-13a5e617c3c1",
      "credentials": {
        "gmailOAuth2": {
          "id": "fkg8u3piSLMJd3Xl",
          "name": "vshaniya10@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 3
            }
          ]
        }
      },
      "id": "74d6ce4b-cf6b-4d91-8088-53063afbd1d5",
      "name": "Multi-Platform Scanner",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -1568,
        -80
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Gmail Scanner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⏭️ No Download - Process Content": {
      "main": [
        [
          {
            "node": "🔄 Prepare for Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Processing Success?": {
      "main": [
        [
          {
            "node": "📝 Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "❌ Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "� Store Document (Stage 1)": {
      "main": [
        [
          {
            "node": "✅ Processing Success?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔄 Prepare for Backend": {
      "main": [
        [
          {
            "node": "� Store Document (Stage 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Download Document": {
      "main": [
        [
          {
            "node": "🔄 Prepare for Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Needs Download?": {
      "main": [
        [
          {
            "node": "📥 Download Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🔄 Prepare for Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔄 Prepare Documents": {
      "main": [
        [
          {
            "node": "📥 Needs Download?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Has Download URL or Attachment?": {
      "main": [
        [
          {
            "node": "🔄 Prepare Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "⏭️ No Download - Process Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📱 WhatsApp Document Processor": {
      "main": [
        [
          {
            "node": "📥 Has Download URL or Attachment?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔧 Maximo Document Processor": {
      "main": [
        [
          {
            "node": "📥 Has Download URL or Attachment?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📁 SharePoint Document Processor": {
      "main": [
        [
          {
            "node": "📥 Has Download URL or Attachment?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📧 Gmail Document Processor": {
      "main": [
        [
          {
            "node": "📥 Has Download URL or Attachment?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📱 WhatsApp Scanner": {
      "main": [
        [
          {
            "node": "📱 WhatsApp Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔧 Maximo Scanner": {
      "main": [
        [
          {
            "node": "🔧 Maximo Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📁 SharePoint Scanner": {
      "main": [
        [
          {
            "node": "📁 SharePoint Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📧 Gmail Scanner": {
      "main": [
        [
          {
            "node": "📧 Gmail Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Multi-Platform Scanner": {
      "main": [
        [
          {
            "node": "📱 WhatsApp Scanner",
            "type": "main",
            "index": 0
          },
          {
            "node": "🔧 Maximo Scanner",
            "type": "main",
            "index": 0
          },
          {
            "node": "📁 SharePoint Scanner",
            "type": "main",
            "index": 0
          },
          {
            "node": "📧 Gmail Scanner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "827c9649-4c15-44ef-bd1f-a153e04fb544",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d3421a9869af05796345b5352956a9e0a760787c7969b18a1fc33a0cdf0eef2e"
  },
  "id": "kWIhYXqSOM07MrA3",
  "tags": [
    {
      "createdAt": "2025-10-02T07:25:06.682Z",
      "updatedAt": "2025-10-02T07:25:06.682Z",
      "id": "iR6Ov1xwOz7unK5O",
      "name": "KMRL Automation"
    },
    {
      "name": "DOC.X Intelligent",
      "id": "y0vG1tXu7j7X5MJy",
      "createdAt": "2025-10-06T10:09:11.625Z",
      "updatedAt": "2025-10-06T10:09:11.625Z"
    },
    {
      "name": "Gmail Processing",
      "id": "l5Yag4eB394mP2Ub",
      "createdAt": "2025-10-06T10:09:11.646Z",
      "updatedAt": "2025-10-06T10:09:11.646Z"
    }
  ]
}